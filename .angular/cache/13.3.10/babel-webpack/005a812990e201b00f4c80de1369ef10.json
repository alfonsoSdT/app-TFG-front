{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport Chart from 'chart.js';\nimport * as i0 from \"@angular/core\";\nexport let TotalCostComponent = /*#__PURE__*/(() => {\n  class TotalCostComponent {\n    constructor() {\n      this.pricePerCourse = [];\n      this.nameCourses = [];\n      this.employeesRenewPerCourse = [];\n      this.totalCostPerCourse = [];\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let yearNow = new Date().getFullYear();\n        let fetchCourses = yield fetch('http://localhost:3001/courses/status');\n        this.courses = yield fetchCourses.json(); //Get all the prices of the courses in order\n\n        for (let c of this.courses) {\n          this.nameCourses.push(c.nameCourse);\n          let coursePricePerEmployee = c.pricePerHour * c.hoursNeeded; //Get the price of each course\n\n          this.pricePerCourse.push(coursePricePerEmployee);\n        }\n\n        this.chartColor = \"#FFFFFF\";\n        this.canvas = document.getElementById(\"chartNamePriceEmployee\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.chartEmail = new Chart(this.ctx, {\n          type: 'pie',\n          data: {\n            labels: this.nameCourses,\n            datasets: [{\n              label: \"Emails\",\n              pointRadius: 0,\n              pointHoverRadius: 0,\n              backgroundColor: ['#e3e3e3', '#4acccd', '#fcc468', '#ef8157', '#000000'],\n              borderWidth: 0,\n              data: this.pricePerCourse\n            }]\n          },\n          options: {\n            legend: {\n              display: true\n            },\n            pieceLabel: {\n              render: 'percentage',\n              fontColor: ['white'],\n              precision: 2\n            },\n            tooltips: {\n              enabled: false\n            },\n            scales: {\n              yAxes: [{\n                ticks: {\n                  display: false\n                },\n                gridLines: {\n                  drawBorder: false,\n                  zeroLineColor: \"transparent\",\n                  color: 'rgba(255,255,255,0.05)'\n                }\n              }],\n              xAxes: [{\n                barPercentage: 1.6,\n                gridLines: {\n                  drawBorder: false,\n                  color: 'rgba(255,255,255,0.1)',\n                  zeroLineColor: \"transparent\"\n                },\n                ticks: {\n                  display: false\n                }\n              }]\n            }\n          }\n        }); //Get all the DC of all Users\n        //Users with DataCourse list\n\n        let fetchUsersWithDC = yield fetch('http://localhost:3001/users/datacourses');\n        this.usersDC = yield fetchUsersWithDC.json();\n\n        for (let user of this.usersDC) {\n          let year = new Date(user.DataCourse.dateExpired).getFullYear();\n          let month = new Date(user.DataCourse.dateExpired).getMonth();\n          let day = new Date(user.DataCourse.dateExpired).getDay();\n          let dateExpired = {\n            'year': year,\n            'month': month,\n            'day': day\n          };\n          user.DataCourse.dateExpired = dateExpired;\n          let yearC = new Date(user.DataCourse.dateCertified).getFullYear();\n          let monthC = new Date(user.DataCourse.dateCertified).getMonth();\n          let dayC = new Date(user.DataCourse.dateCertified).getDay();\n          let dateCertified = {\n            'year': yearC,\n            'month': monthC,\n            'day': dayC\n          };\n          user.DataCourse.dateCertified = dateCertified;\n        }\n\n        for (let c of this.courses) {\n          let coun = 0;\n          let nameC = c.nameCourse;\n\n          for (let user of this.usersDC) {\n            //We have all the Users with each DC\n            //We will run each\n            if (nameC == user.DataCourse.Course.nameCourse && Math.abs(user.DataCourse.dateExpired.year - yearNow) < 2) {\n              coun++;\n            }\n          } //Save the count of users with expireDate about to expire\n\n\n          this.employeesRenewPerCourse.push(coun);\n        }\n\n        console.log(this.employeesRenewPerCourse);\n        let i;\n\n        for (i = 0; i < this.employeesRenewPerCourse.length; i++) {\n          this.totalCostPerCourse.push(this.employeesRenewPerCourse[i] * this.pricePerCourse[i]);\n        }\n\n        console.log(this.totalCostPerCourse); //CosForNextYear\n\n        this.canvas = document.getElementById(\"chartCostCourse\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.chartEmail = new Chart(this.ctx, {\n          type: 'pie',\n          data: {\n            labels: this.nameCourses,\n            datasets: [{\n              label: \"Emails\",\n              pointRadius: 0,\n              pointHoverRadius: 0,\n              backgroundColor: ['#e3e3e3', '#4acccd', '#fcc468', '#ef8157', '#000000'],\n              borderWidth: 0,\n              data: this.totalCostPerCourse\n            }]\n          },\n          options: {\n            legend: {\n              display: true\n            },\n            pieceLabel: {\n              render: 'percentage',\n              fontColor: ['white'],\n              precision: 2\n            },\n            tooltips: {\n              enabled: false\n            },\n            scales: {\n              yAxes: [{\n                ticks: {\n                  display: false\n                },\n                gridLines: {\n                  drawBorder: false,\n                  zeroLineColor: \"transparent\",\n                  color: 'rgba(255,255,255,0.05)'\n                }\n              }],\n              xAxes: [{\n                barPercentage: 1.6,\n                gridLines: {\n                  drawBorder: false,\n                  color: 'rgba(255,255,255,0.1)',\n                  zeroLineColor: \"transparent\"\n                },\n                ticks: {\n                  display: false\n                }\n              }]\n            }\n          }\n        });\n      });\n    }\n\n  }\n\n  TotalCostComponent.ɵfac = function TotalCostComponent_Factory(t) {\n    return new (t || TotalCostComponent)();\n  };\n\n  TotalCostComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TotalCostComponent,\n    selectors: [[\"app-total-cost\"]],\n    decls: 18,\n    vars: 0,\n    consts: [[1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-category\"], [1, \"card-body\"], [\"id\", \"chartCostCourse\"], [1, \"col-md-4\"], [\"id\", \"chartNamePriceEmployee\"]],\n    template: function TotalCostComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h5\", 3);\n        i0.ɵɵtext(4, \"Total Cost\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\", 4);\n        i0.ɵɵtext(6, \"Total cost of all courses \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵelement(8, \"canvas\", 6);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\", 1)(11, \"div\", 2)(12, \"h5\", 3);\n        i0.ɵɵtext(13, \"Courses\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"p\", 4);\n        i0.ɵɵtext(15, \"Price per employee for each course\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 5);\n        i0.ɵɵelement(17, \"canvas\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n    },\n    styles: [\"\"]\n  });\n  return TotalCostComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}